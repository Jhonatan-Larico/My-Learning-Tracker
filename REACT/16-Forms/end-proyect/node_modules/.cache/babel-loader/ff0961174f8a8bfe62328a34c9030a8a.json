{"ast":null,"code":"var _jsxFileName = \"/home/jhonatan/developer/My-Learning-Tracker/My-Learning-Tracker/REACT/16-Forms/end-proyect/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false); // validate on every keystroke\n\n  const nameInputChangeHandler = e => {\n    // on very keystroke it obtained the value\n    //on every keystroke, this is fired, the enteredName state is updated\n    setEnteredName(e.target.value); //validation\n    // here we shouldn't use the enteredName state but instead \"e.target.value\", because we do update the entered name state with \"setEnteredName(e.target.value)\" and such state updates are then scheduled by react they are no processed immediately  so here don't have that latest state yet \n\n    if (e.target.value.trim() !== \"\") {\n      setEnteredNameIsValid(true);\n    }\n  }; //validate when a input is losing focus\n\n\n  const nameInputBlurHandler = () => {\n    console.log(\"blur\"); // if out input loses focus, it definitely was touched\n\n    setEnteredNameTouched(true); //validation\n\n    if (enteredName.trim() === \"\") {\n      setEnteredNameIsValid(false);\n    }\n  }; //validate when form is submitted\n\n\n  const formSubmissionHandler = e => {\n    e.preventDefault();\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim() === \"\") {\n      setEnteredNameIsValid(false);\n      return;\n    }\n\n    setEnteredNameIsValid(true);\n    console.log(enteredName); // only when the form is submitted it obtained the value\n    //nameInputRef.current.value = \"\" =>NOT IDEAL,DON'T MANIPULATE THE DOM\n\n    setEnteredName(\"\");\n  };\n\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  const nameInputClasses = nameInputIsInvalid ? \"form-control invalid\" : \"form-control \";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"E+J08VDKU5xPbhzR5ys5bmcr9/o=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useState","SimpleInput","props","enteredName","setEnteredName","enteredNameIsValid","setEnteredNameIsValid","enteredNameTouched","setEnteredNameTouched","nameInputChangeHandler","e","target","value","trim","nameInputBlurHandler","console","log","formSubmissionHandler","preventDefault","nameInputIsInvalid","nameInputClasses"],"sources":["/home/jhonatan/developer/My-Learning-Tracker/My-Learning-Tracker/REACT/16-Forms/end-proyect/src/components/SimpleInput.js"],"sourcesContent":["import { useState } from \"react\";\n\nconst SimpleInput = (props) => {\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  // validate on every keystroke\n  const nameInputChangeHandler = (e) => {\n    // on very keystroke it obtained the value\n    //on every keystroke, this is fired, the enteredName state is updated\n    setEnteredName(e.target.value);\n\n    //validation\n    // here we shouldn't use the enteredName state but instead \"e.target.value\", because we do update the entered name state with \"setEnteredName(e.target.value)\" and such state updates are then scheduled by react they are no processed immediately  so here don't have that latest state yet \n    if (e.target.value.trim() !== \"\") {\n      setEnteredNameIsValid(true);\n    }\n  };\n\n  //validate when a input is losing focus\n  const nameInputBlurHandler = () => {\n    console.log(\"blur\");\n    // if out input loses focus, it definitely was touched\n    setEnteredNameTouched(true);\n\n    //validation\n    if (enteredName.trim() === \"\") {\n      setEnteredNameIsValid(false);\n    }\n  };\n\n  //validate when form is submitted\n  const formSubmissionHandler = (e) => {\n    e.preventDefault();\n\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim() === \"\") {\n      setEnteredNameIsValid(false);\n      return;\n    }\n    setEnteredNameIsValid(true);\n\n    console.log(enteredName);\n    // only when the form is submitted it obtained the value\n    \n\n    //nameInputRef.current.value = \"\" =>NOT IDEAL,DON'T MANIPULATE THE DOM\n    setEnteredName(\"\");\n  };\n\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n\n  const nameInputClasses = nameInputIsInvalid\n    ? \"form-control invalid\"\n    : \"form-control \";\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          onChange={nameInputChangeHandler}\n          onBlur={nameInputBlurHandler}\n          value={enteredName}\n        />\n        {nameInputIsInvalid && (\n          <p className=\"error-text\">Name must not be empty</p>\n        )}\n      </div>\n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;EAAA;;EAC7B,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCJ,QAAQ,CAAC,EAAD,CAA9C;EACA,MAAM,CAACK,kBAAD,EAAqBC,qBAArB,IAA8CN,QAAQ,CAAC,KAAD,CAA5D;EACA,MAAM,CAACO,kBAAD,EAAqBC,qBAArB,IAA8CR,QAAQ,CAAC,KAAD,CAA5D,CAH6B,CAI7B;;EACA,MAAMS,sBAAsB,GAAIC,CAAD,IAAO;IACpC;IACA;IACAN,cAAc,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV,CAAd,CAHoC,CAKpC;IACA;;IACA,IAAIF,CAAC,CAACC,MAAF,CAASC,KAAT,CAAeC,IAAf,OAA0B,EAA9B,EAAkC;MAChCP,qBAAqB,CAAC,IAAD,CAArB;IACD;EACF,CAVD,CAL6B,CAiB7B;;;EACA,MAAMQ,oBAAoB,GAAG,MAAM;IACjCC,OAAO,CAACC,GAAR,CAAY,MAAZ,EADiC,CAEjC;;IACAR,qBAAqB,CAAC,IAAD,CAArB,CAHiC,CAKjC;;IACA,IAAIL,WAAW,CAACU,IAAZ,OAAuB,EAA3B,EAA+B;MAC7BP,qBAAqB,CAAC,KAAD,CAArB;IACD;EACF,CATD,CAlB6B,CA6B7B;;;EACA,MAAMW,qBAAqB,GAAIP,CAAD,IAAO;IACnCA,CAAC,CAACQ,cAAF;IAEAV,qBAAqB,CAAC,IAAD,CAArB;;IAEA,IAAIL,WAAW,CAACU,IAAZ,OAAuB,EAA3B,EAA+B;MAC7BP,qBAAqB,CAAC,KAAD,CAArB;MACA;IACD;;IACDA,qBAAqB,CAAC,IAAD,CAArB;IAEAS,OAAO,CAACC,GAAR,CAAYb,WAAZ,EAXmC,CAYnC;IAGA;;IACAC,cAAc,CAAC,EAAD,CAAd;EACD,CAjBD;;EAmBA,MAAMe,kBAAkB,GAAG,CAACd,kBAAD,IAAuBE,kBAAlD;EAEA,MAAMa,gBAAgB,GAAGD,kBAAkB,GACvC,sBADuC,GAEvC,eAFJ;EAIA,oBACE;IAAM,QAAQ,EAAEF,qBAAhB;IAAA,wBACE;MAAK,SAAS,EAAEG,gBAAhB;MAAA,wBACE;QAAO,OAAO,EAAC,MAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QACE,IAAI,EAAC,MADP;QAEE,EAAE,EAAC,MAFL;QAGE,QAAQ,EAAEX,sBAHZ;QAIE,MAAM,EAAEK,oBAJV;QAKE,KAAK,EAAEX;MALT;QAAA;QAAA;QAAA;MAAA,QAFF,EASGgB,kBAAkB,iBACjB;QAAG,SAAS,EAAC,YAAb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAVJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAcE;MAAK,SAAS,EAAC,cAAf;MAAA,uBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAdF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAoBD,CA3ED;;GAAMlB,W;;KAAAA,W;AA6EN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}