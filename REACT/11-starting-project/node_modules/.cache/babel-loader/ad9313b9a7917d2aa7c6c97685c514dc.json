{"ast":null,"code":"var _jsxFileName = \"/home/jhonatan/developer/My-Learning-Tracker/My-Learning-Tracker/REACT/11-starting-project/src/store/CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\nimport CartContext from \"./cart-context\"; // the goal  of this component is simply  to manage  the current context to data and provide that context  to all components that want access to it\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n}; // in the reducer function , you can run different pieces of code depending on which action type was dispatched\n\nconst cartReducer = (state, action) => {\n  if (action.type === 'ADD') {\n    const updatedItems = state.items.concat(action.item);\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount; // return a new state snapshot\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  } //return a new state snaphot\n\n\n  return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: \"ADD\",\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: \"REMOVE\",\n      item: id\n    });\n  }; //this will be the concrete context value thought  which will aso be updated over time\n\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedItems","concat","item","updatedTotalAmount","price","amount","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","id","cartContext","addItem","removeItem","children"],"sources":["/home/jhonatan/developer/My-Learning-Tracker/My-Learning-Tracker/REACT/11-starting-project/src/store/CartProvider.js"],"sourcesContent":["import { useReducer } from \"react\";\nimport CartContext from \"./cart-context\";\n\n// the goal  of this component is simply  to manage  the current context to data and provide that context  to all components that want access to it\n\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0,\n};\n// in the reducer function , you can run different pieces of code depending on which action type was dispatched\nconst cartReducer = (state, action) => {\n  if(action.type === 'ADD'){\n  const updatedItems = state.items.concat(action.item);\n  const updatedTotalAmount =\n    state.totalAmount + action.item.price * action.item.amount;\n    // return a new state snapshot\n    return {\n      items : updatedItems,\n      totalAmount : updatedTotalAmount\n    }\n  }\n  //return a new state snaphot\n  return defaultCartState;\n};\n\nconst CartProvider = (props) => {\n  const [cartState, dispatchCartAction] = useReducer(\n    cartReducer,\n    defaultCartState\n  );\n\n  const addItemToCartHandler = (item) => {\n    dispatchCartAction({ type: \"ADD\", item: item });\n  };\n  const removeItemFromCartHandler = (id) => {\n    dispatchCartAction({ type: \"REMOVE\", item: id });\n  };\n\n  //this will be the concrete context value thought  which will aso be updated over time\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler,\n  };\n\n  return (\n    <CartContext.Provider value={cartContext}>\n      {/*THis allows us to wrap any components that should get access to this context with this cart provider component */}\n      {props.children}\n    </CartContext.Provider>\n  );\n};\n\nexport default CartProvider;\n"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,WAAP,MAAwB,gBAAxB,C,CAEA;;;AAEA,MAAMC,gBAAgB,GAAG;EACvBC,KAAK,EAAE,EADgB;EAEvBC,WAAW,EAAE;AAFU,CAAzB,C,CAIA;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;EACrC,IAAGA,MAAM,CAACC,IAAP,KAAgB,KAAnB,EAAyB;IACzB,MAAMC,YAAY,GAAGH,KAAK,CAACH,KAAN,CAAYO,MAAZ,CAAmBH,MAAM,CAACI,IAA1B,CAArB;IACA,MAAMC,kBAAkB,GACtBN,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACI,IAAP,CAAYE,KAAZ,GAAoBN,MAAM,CAACI,IAAP,CAAYG,MADtD,CAFyB,CAIvB;;IACA,OAAO;MACLX,KAAK,EAAGM,YADH;MAELL,WAAW,EAAGQ;IAFT,CAAP;EAID,CAVoC,CAWrC;;;EACA,OAAOV,gBAAP;AACD,CAbD;;AAeA,MAAMa,YAAY,GAAIC,KAAD,IAAW;EAAA;;EAC9B,MAAM,CAACC,SAAD,EAAYC,kBAAZ,IAAkClB,UAAU,CAChDK,WADgD,EAEhDH,gBAFgD,CAAlD;;EAKA,MAAMiB,oBAAoB,GAAIR,IAAD,IAAU;IACrCO,kBAAkB,CAAC;MAAEV,IAAI,EAAE,KAAR;MAAeG,IAAI,EAAEA;IAArB,CAAD,CAAlB;EACD,CAFD;;EAGA,MAAMS,yBAAyB,GAAIC,EAAD,IAAQ;IACxCH,kBAAkB,CAAC;MAAEV,IAAI,EAAE,QAAR;MAAkBG,IAAI,EAAEU;IAAxB,CAAD,CAAlB;EACD,CAFD,CAT8B,CAa9B;;;EACA,MAAMC,WAAW,GAAG;IAClBnB,KAAK,EAAEc,SAAS,CAACd,KADC;IAElBC,WAAW,EAAEa,SAAS,CAACb,WAFL;IAGlBmB,OAAO,EAAEJ,oBAHS;IAIlBK,UAAU,EAAEJ;EAJM,CAApB;EAOA,oBACE,QAAC,WAAD,CAAa,QAAb;IAAsB,KAAK,EAAEE,WAA7B;IAAA,UAEGN,KAAK,CAACS;EAFT;IAAA;IAAA;IAAA;EAAA,QADF;AAMD,CA3BD;;GAAMV,Y;;KAAAA,Y;AA6BN,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}