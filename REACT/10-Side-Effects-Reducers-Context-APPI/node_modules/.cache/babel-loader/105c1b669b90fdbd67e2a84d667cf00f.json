{"ast":null,"code":"var _jsxFileName = \"/home/jhonatan/developer/My-Learning-Tracker/My-Learning-Tracker/REACT/10-starting-project/src/components/Login/Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useReducer, useContext } from 'react';\nimport Card from '../UI/Card/Card';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button';\nimport AuthContext from '../store/auth-context'; //this function is outside of the component because we won't need any data  that's generated  inside of the component function\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst emailReducer = (state, action) => {\n  // if I received a user input action\n  if (action.type === 'USER_INPUT') {\n    return {\n      value: action.val,\n      isValid: action.val.includes('@')\n    };\n  } // state is the last state snapshot\n\n\n  if (action.type === \"INPUT_BLUR\") {\n    return {\n      value: state.value,\n      isValid: state.value.includes('@')\n    };\n  } // return default state \n\n\n  return {\n    value: '',\n    isValid: false\n  };\n};\n\nconst passwordReducer = (state, action) => {\n  if (action.type === 'USER_INPUT') {\n    return {\n      value: action.val,\n      isValid: action.val.trim().length > 6\n    };\n  }\n\n  if (action.type === \"INPUT_BLUR\") {\n    return {\n      value: state.value,\n      isValid: state.value.trim().length > 6\n    };\n  }\n\n  return {\n    value: '',\n    isValid: false\n  };\n};\n\nconst Login = props => {\n  _s();\n\n  // const [enteredPassword, setEnteredPassword] = useState('');\n  // const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\n  const [emailState, dispatchEmail] = useReducer(emailReducer, //inisital state\n  {\n    value: '',\n    isValid: null\n  });\n  const [passwordState, dispatchPassword] = useReducer(passwordReducer, //inisital state\n  {\n    value: '',\n    isValid: null\n  });\n  const authCtx = useContext(AuthContext); //(emailIsValid, passwordIsValid ) this is an alias assigment, not the value assigment \n  //I'm pulling out the  isValid state here , whenever just the value changes and the validity did not change this effect will not rerun\n\n  const {\n    isValid: emailIsValid\n  } = emailState;\n  const {\n    isValid: passwordIsValid\n  } = passwordState;\n  useEffect(() => {\n    const identifier = setTimeout(() => {\n      console.log('Checking form validity!');\n      setFormIsValid(emailIsValid && passwordIsValid //emailState.isValid && passwordState.isValid\n      );\n    }, 1000); // The cleanup function runs  before every new side effect function execution and before the component is removed and it doesn't run before the first side effect function execution but thereafiter it will run  before every next side effect function execution\n\n    return () => {\n      console.log(\"CLEANUP\");\n      clearTimeout(identifier);\n    };\n  }, //After every login component function execution , it will rerun this useEffect function  but only if either setFormIsValid or enteredEmail or enteredPassword  changed in the last component rerender cycle if neither of the three changed, this effect function will not rerun, you can also omit setFormIsValid because those state updating functions by default  are insured by React to never change, so these functions  will always be the same across rereder cycles, so you can omit them \n  [emailIsValid, passwordIsValid] //[emailState, passwordState]\n  ); // -this actually is now an okay way of updating a state based on other state because wth use effect, we're guaranteed that this will run for every state update React performs, useEffect only runs after state updates\n\n  const emailChangeHandler = event => {\n    // dispatch an action, when we want to update  the value \n    // ( ) can be a string,number but often will be an object,and we also can add an extra payload, since we wanna save what the user entered.So now that's our action it's this object \n    //So this now will trigger this function \"emailReducer\"  \n    dispatchEmail({\n      type: 'USER_INPUT',\n      val: event.target.value\n    });\n    /*    setFormIsValid(\n         event.target.value.includes('@') && passwordState.isValid\n       ) */\n  };\n\n  const validateEmailHandler = () => {\n    //simple action without a value\n    dispatchEmail({\n      type: 'INPUT_BLUR'\n    });\n  };\n\n  const passwordChangeHandler = event => {\n    dispatchPassword({\n      type: 'USER_INPUT',\n      val: event.target.value\n    });\n    /*    setFormIsValid(\n         emailState.isValid && event.target.value.trim().length > 6\n        ); */\n  };\n\n  const validatePasswordHandler = () => {\n    dispatchPassword({\n      type: \"INPUT_BLUR\"\n    });\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    authCtx.onLogin(emailState.value, passwordState.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.login,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${emailState.isValid === false ? classes.invalid : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"E-Mail\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          value: emailState.value,\n          onChange: emailChangeHandler,\n          onBlur: validateEmailHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${passwordState.isValid === false ? classes.invalid : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          value: passwordState.value,\n          onChange: passwordChangeHandler,\n          onBlur: validatePasswordHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: classes.btn,\n          disabled: !formIsValid,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"h+oiPCEe97614LVNCtrB8qaODfc=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useEffect","useReducer","useContext","Card","classes","Button","AuthContext","emailReducer","state","action","type","value","val","isValid","includes","passwordReducer","trim","length","Login","props","formIsValid","setFormIsValid","emailState","dispatchEmail","passwordState","dispatchPassword","authCtx","emailIsValid","passwordIsValid","identifier","setTimeout","console","log","clearTimeout","emailChangeHandler","event","target","validateEmailHandler","passwordChangeHandler","validatePasswordHandler","submitHandler","preventDefault","onLogin","login","control","invalid","actions","btn"],"sources":["/home/jhonatan/developer/My-Learning-Tracker/My-Learning-Tracker/REACT/10-starting-project/src/components/Login/Login.js"],"sourcesContent":["import React, { useState, useEffect, useReducer, useContext } from 'react';\n\nimport Card from '../UI/Card/Card';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button';\nimport AuthContext from '../store/auth-context';\n//this function is outside of the component because we won't need any data  that's generated  inside of the component function\nconst emailReducer = (state,action) =>{\n  // if I received a user input action\n  if(action.type === 'USER_INPUT'){\n    return {value: action.val, isValid: action.val.includes('@')}\n  }\n  // state is the last state snapshot\n  if(action.type === \"INPUT_BLUR\"){\n    return {value:state.value , isValid: state.value.includes('@')}\n  }\n  // return default state \n  return {value:'', isValid:false}\n}\nconst passwordReducer = (state,action)=>{\n    if(action.type === 'USER_INPUT'){\n      return {value: action.val, isValid: action.val.trim().length > 6 }\n    }\n    if(action.type === \"INPUT_BLUR\"){\n      return {value:state.value , isValid: state.value.trim().length > 6  }\n    }\n    return {value:'', isValid:false}\n}\n\nconst Login = (props) => { \n  // const [enteredPassword, setEnteredPassword] = useState('');\n  // const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\n\n\n const [emailState, dispatchEmail]=useReducer(emailReducer, \n  //inisital state\n  {value:'',\n  isValid:null}\n  );\n  const [passwordState, dispatchPassword]=useReducer(passwordReducer, \n    //inisital state\n    {value:'',\n    isValid:null}\n    );\n  \n    const authCtx = useContext(AuthContext)\n\n\n\n  //(emailIsValid, passwordIsValid ) this is an alias assigment, not the value assigment \n  //I'm pulling out the  isValid state here , whenever just the value changes and the validity did not change this effect will not rerun\n  const {isValid: emailIsValid} = emailState\n  const {isValid: passwordIsValid} = passwordState\n\n\n  useEffect(()=>{\n    const identifier = setTimeout(()=>{\n      console.log('Checking form validity!')\n      setFormIsValid(\n        emailIsValid && passwordIsValid\n        //emailState.isValid && passwordState.isValid\n      );\n    },1000)\n    // The cleanup function runs  before every new side effect function execution and before the component is removed and it doesn't run before the first side effect function execution but thereafiter it will run  before every next side effect function execution\n    return ()=>{\n      console.log(\"CLEANUP\")\n      clearTimeout(identifier)\n    }\n  \n  },\n  //After every login component function execution , it will rerun this useEffect function  but only if either setFormIsValid or enteredEmail or enteredPassword  changed in the last component rerender cycle if neither of the three changed, this effect function will not rerun, you can also omit setFormIsValid because those state updating functions by default  are insured by React to never change, so these functions  will always be the same across rereder cycles, so you can omit them \n  [emailIsValid,passwordIsValid]\n  //[emailState, passwordState]\n  )\n  // -this actually is now an okay way of updating a state based on other state because wth use effect, we're guaranteed that this will run for every state update React performs, useEffect only runs after state updates\n\n\n  \n  const emailChangeHandler = (event) => {\n  // dispatch an action, when we want to update  the value \n    // ( ) can be a string,number but often will be an object,and we also can add an extra payload, since we wanna save what the user entered.So now that's our action it's this object \n    //So this now will trigger this function \"emailReducer\"  \n    dispatchEmail({type : 'USER_INPUT', val:event.target.value } )\n\n /*    setFormIsValid(\n      event.target.value.includes('@') && passwordState.isValid\n    ) */\n  };\n  const validateEmailHandler = () => {\n    //simple action without a value\n    dispatchEmail({type: 'INPUT_BLUR'})\n  };\n\n  const passwordChangeHandler = (event) => {\n    dispatchPassword({type:'USER_INPUT', val: event.target.value})\n /*    setFormIsValid(\n      emailState.isValid && event.target.value.trim().length > 6\n\n    ); */\n  };\n\n  const validatePasswordHandler = () => {\n    dispatchPassword({type: \"INPUT_BLUR\" })\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    authCtx.onLogin(emailState.value, passwordState.value);\n  };\n\n  return (\n    <Card className={classes.login}>\n      <form onSubmit={submitHandler}>\n        <div\n          className={`${classes.control} ${\n            emailState.isValid === false ? classes.invalid : ''\n          }`}\n        >\n          <label htmlFor=\"email\">E-Mail</label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            value={emailState.value}\n            onChange={emailChangeHandler}\n            onBlur={validateEmailHandler}\n          />\n        </div>\n        <div\n          className={`${classes.control} ${\n            passwordState.isValid === false ? classes.invalid : ''\n          }`}\n        >\n          <label htmlFor=\"password\">Password</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            value={passwordState.value}\n            onChange={passwordChangeHandler}\n            onBlur={validatePasswordHandler}\n          />\n        </div>\n        <div className={classes.actions}>\n          <Button type=\"submit\" className={classes.btn} disabled={!formIsValid}>\n            Login\n          </Button>\n        </div>\n      </form>\n    </Card>\n  );\n};\n\nexport default Login;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}