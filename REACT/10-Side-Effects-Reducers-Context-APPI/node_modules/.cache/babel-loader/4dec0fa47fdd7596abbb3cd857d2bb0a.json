{"ast":null,"code":"var _jsxFileName = \"/home/jhonatan/developer/My-Learning-Tracker/My-Learning-Tracker/REACT/10-starting-project/src/components/Login/Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useReducer } from 'react';\nimport Card from '../UI/Card/Card';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button'; //this function is outside of the component because we won't need any data  that's generated  inside of the component function\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst emailReducer = (state, action) => {\n  // return a new state\n  return {\n    value: '',\n    isValid: false\n  };\n};\n\nconst Login = props => {\n  _s();\n\n  // const [enteredEmail, setEnteredEmail] = useState('');\n  // const [emailIsValid, setEmailIsValid] = useState();\n  const [enteredPassword, setEnteredPassword] = useState('');\n  const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\n  const [emailState, dispatchEmail] = useReducer(emailReducer, //inisital state\n  {\n    value: '',\n    isValid: false\n  });\n  /*useEffect(()=>{\n    const identifier = setTimeout(()=>{\n      console.log('Checking form validity!')\n      setFormIsValid(\n        enteredEmail.includes('@') && enteredPassword.trim().length > 6\n      );\n    },1000)\n    // The cleanup function runs  before every new side effect function execution and before the component is removed and it doesn't run before the first side effect function execution but thereafter it will run  before every next side effect function execution\n    return ()=>{\n      console.log(\"CLEANUP\")\n      clearTimeout(identifier)\n    }\n  \n  },\n  //After every login component function execution , it will rerun this useEffect function  but only if either setFormIsValid or enteredEmail or enteredPassword  changed in the last component rerender cycle if neither of the three changed, this effect function will not rerun, you can also omit setFormIsValid because those state updating functions by default  are insured by React to never change, so these functions  will always be the same across rereder cycles, so you can omit them \n   \n  [enteredEmail, enteredPassword]) */\n\n  const emailChangeHandler = event => {\n    setEnteredEmail(event.target.value);\n    setFormIsValid(event.target.value.includes('@') && enteredPassword.trim().length > 6);\n  };\n\n  const passwordChangeHandler = event => {\n    setEnteredPassword(event.target.value);\n    setFormIsValid( //event.target.value.trim().length > 6 && enteredEmail.includes('@')\n    emailState.value.isValid && event.target.value.trim().length > 6);\n  };\n\n  const validateEmailHandler = () => {\n    setEmailIsValid(emailState.isValid);\n  };\n\n  const validatePasswordHandler = () => {\n    setPasswordIsValid(enteredPassword.trim().length > 6);\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    props.onLogin(emailState.value, enteredPassword);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.login,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${emailState.isValid === false ? classes.invalid : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"E-Mail\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          value: emailState.value,\n          onChange: emailChangeHandler,\n          onBlur: validateEmailHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${passwordIsValid === false ? classes.invalid : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          value: enteredPassword,\n          onChange: passwordChangeHandler,\n          onBlur: validatePasswordHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: classes.btn,\n          disabled: !formIsValid,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"18Rtp1JTsMkCy5evFsCqAw05jb4=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useEffect","useReducer","Card","classes","Button","emailReducer","state","action","value","isValid","Login","props","enteredPassword","setEnteredPassword","passwordIsValid","setPasswordIsValid","formIsValid","setFormIsValid","emailState","dispatchEmail","emailChangeHandler","event","setEnteredEmail","target","includes","trim","length","passwordChangeHandler","validateEmailHandler","setEmailIsValid","validatePasswordHandler","submitHandler","preventDefault","onLogin","login","control","invalid","actions","btn"],"sources":["/home/jhonatan/developer/My-Learning-Tracker/My-Learning-Tracker/REACT/10-starting-project/src/components/Login/Login.js"],"sourcesContent":["import React, { useState, useEffect, useReducer } from 'react';\n\nimport Card from '../UI/Card/Card';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button';\n//this function is outside of the component because we won't need any data  that's generated  inside of the component function\nconst emailReducer = (state,action) =>{\n  // return a new state\n  return {value:'', isValid:false}\n}\n\nconst Login = (props) => {\n  // const [enteredEmail, setEnteredEmail] = useState('');\n  // const [emailIsValid, setEmailIsValid] = useState();\n  const [enteredPassword, setEnteredPassword] = useState('');\n  const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\n\n const [emailState, dispatchEmail]=useReducer(emailReducer, \n  //inisital state\n  {value:'',\n  isValid:false}\n  );\n\n  /*useEffect(()=>{\n    const identifier = setTimeout(()=>{\n      console.log('Checking form validity!')\n      setFormIsValid(\n        enteredEmail.includes('@') && enteredPassword.trim().length > 6\n      );\n    },1000)\n    // The cleanup function runs  before every new side effect function execution and before the component is removed and it doesn't run before the first side effect function execution but thereafter it will run  before every next side effect function execution\n    return ()=>{\n      console.log(\"CLEANUP\")\n      clearTimeout(identifier)\n    }\n  \n  },\n  //After every login component function execution , it will rerun this useEffect function  but only if either setFormIsValid or enteredEmail or enteredPassword  changed in the last component rerender cycle if neither of the three changed, this effect function will not rerun, you can also omit setFormIsValid because those state updating functions by default  are insured by React to never change, so these functions  will always be the same across rereder cycles, so you can omit them \n   \n  [enteredEmail, enteredPassword]) */\n\n\n\n  \n  const emailChangeHandler = (event) => {\n    setEnteredEmail(event.target.value);\n    setFormIsValid(\n      event.target.value.includes('@') && enteredPassword.trim().length > 6\n    );\n  };\n\n  const passwordChangeHandler = (event) => {\n    setEnteredPassword(event.target.value);\n    setFormIsValid(\n      //event.target.value.trim().length > 6 && enteredEmail.includes('@')\n      emailState.value.isValid && event.target.value.trim().length > 6\n\n    );\n  };\n\n  const validateEmailHandler = () => {\n    setEmailIsValid(emailState.isValid);\n  };\n\n  const validatePasswordHandler = () => {\n    setPasswordIsValid(enteredPassword.trim().length > 6);\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    props.onLogin(emailState.value, enteredPassword);\n  };\n\n  return (\n    <Card className={classes.login}>\n      <form onSubmit={submitHandler}>\n        <div\n          className={`${classes.control} ${\n            emailState.isValid === false ? classes.invalid : ''\n          }`}\n        >\n          <label htmlFor=\"email\">E-Mail</label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            value={emailState.value}\n            onChange={emailChangeHandler}\n            onBlur={validateEmailHandler}\n          />\n        </div>\n        <div\n          className={`${classes.control} ${\n            passwordIsValid === false ? classes.invalid : ''\n          }`}\n        >\n          <label htmlFor=\"password\">Password</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            value={enteredPassword}\n            onChange={passwordChangeHandler}\n            onBlur={validatePasswordHandler}\n          />\n        </div>\n        <div className={classes.actions}>\n          <Button type=\"submit\" className={classes.btn} disabled={!formIsValid}>\n            Login\n          </Button>\n        </div>\n      </form>\n    </Card>\n  );\n};\n\nexport default Login;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}