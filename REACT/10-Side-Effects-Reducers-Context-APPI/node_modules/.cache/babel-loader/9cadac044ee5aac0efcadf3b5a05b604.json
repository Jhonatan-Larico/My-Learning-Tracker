{"ast":null,"code":"var _jsxFileName = \"/home/jhonatan/developer/My-Learning-Tracker/My-Learning-Tracker/REACT/10-starting-project/src/components/store/auth-context.js\",\n    _s = $RefreshSig$();\n\n//Context object\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  isLoggedIn: false,\n  //it's just a dummy function\n  onLogout: () => {},\n  onLogin: (email, password) => {}\n});\nexport const AuthContextProvider = props => {\n  _s();\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    const storeUserLoggedInInformation = localStorage.getItem(\"isLoggedIn\");\n\n    if (storeUserLoggedInInformation === \"1\") {\n      setIsLoggedIn(true);\n    }\n  }, []);\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"isLoggedIn\");\n    setIsLoggedIn(false);\n  };\n\n  const loginHandler = () => {\n    localStorage.setItem(\"isLoggedIn\", \"1\");\n    setIsLoggedIn(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn: isLoggedIn,\n      onLogout: logoutHandler,\n      onLogin: loginHandler\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthContextProvider, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n\n_c = AuthContextProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["React","useState","useEffect","AuthContext","createContext","isLoggedIn","onLogout","onLogin","email","password","AuthContextProvider","props","setIsLoggedIn","storeUserLoggedInInformation","localStorage","getItem","logoutHandler","removeItem","loginHandler","setItem"],"sources":["/home/jhonatan/developer/My-Learning-Tracker/My-Learning-Tracker/REACT/10-starting-project/src/components/store/auth-context.js"],"sourcesContent":["//Context object\nimport React, { useState, useEffect } from \"react\";\n\nconst AuthContext = React.createContext({\n  isLoggedIn: false,\n  //it's just a dummy function\n  onLogout: () => {},\n  onLogin: (email, password) => {},\n});\n\nexport const AuthContextProvider = (props) => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    const storeUserLoggedInInformation = localStorage.getItem(\"isLoggedIn\");\n    if (storeUserLoggedInInformation === \"1\") {\n      setIsLoggedIn(true);\n    }\n  }, []);\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"isLoggedIn\");\n    setIsLoggedIn(false);\n  };\n  const loginHandler = () => {\n    localStorage.setItem(\"isLoggedIn\", \"1\");\n    setIsLoggedIn(true);\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        isLoggedIn: isLoggedIn,\n        onLogout: logoutHandler,\n        onLogin: loginHandler,\n      }}\n    >\n     \n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,MAAMC,WAAW,gBAAGH,KAAK,CAACI,aAAN,CAAoB;EACtCC,UAAU,EAAE,KAD0B;EAEtC;EACAC,QAAQ,EAAE,MAAM,CAAE,CAHoB;EAItCC,OAAO,EAAE,CAACC,KAAD,EAAQC,QAAR,KAAqB,CAAE;AAJM,CAApB,CAApB;AAOA,OAAO,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;EAAA;;EAC5C,MAAM,CAACN,UAAD,EAAaO,aAAb,IAA8BX,QAAQ,CAAC,KAAD,CAA5C;EACAC,SAAS,CAAC,MAAM;IACd,MAAMW,4BAA4B,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAArC;;IACA,IAAIF,4BAA4B,KAAK,GAArC,EAA0C;MACxCD,aAAa,CAAC,IAAD,CAAb;IACD;EACF,CALQ,EAKN,EALM,CAAT;;EAOA,MAAMI,aAAa,GAAG,MAAM;IAC1BF,YAAY,CAACG,UAAb,CAAwB,YAAxB;IACAL,aAAa,CAAC,KAAD,CAAb;EACD,CAHD;;EAIA,MAAMM,YAAY,GAAG,MAAM;IACzBJ,YAAY,CAACK,OAAb,CAAqB,YAArB,EAAmC,GAAnC;IACAP,aAAa,CAAC,IAAD,CAAb;EACD,CAHD;;EAKA,oBACE,QAAC,WAAD,CAAa,QAAb;IACE,KAAK,EAAE;MACLP,UAAU,EAAEA,UADP;MAELC,QAAQ,EAAEU,aAFL;MAGLT,OAAO,EAAEW;IAHJ;EADT;IAAA;IAAA;IAAA;EAAA,QADF;AAWD,CA7BM;;GAAMR,mB;;KAAAA,mB;AA+Bb,eAAeP,WAAf"},"metadata":{},"sourceType":"module"}