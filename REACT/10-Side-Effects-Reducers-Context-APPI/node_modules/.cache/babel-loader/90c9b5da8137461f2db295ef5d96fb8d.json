{"ast":null,"code":"/*import React, { useState, useEffect } from \"react\";\n\nimport Login from \"./components/Login/Login\";\nimport Home from \"./components/Home/Home\";\nimport MainHeader from \"./components/MainHeader/MainHeader\";\nimport AuthContext from \"./components/store/auth-context\";\n\nfunction App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  //console.log(\"loop\")\n\n  //this function don't run directly in the component function\n  // this functions is executed after every component re-evaluation\n  // this effect only ran once, when the component rendered for the first time\n  useEffect(() => {\n    //console.log(\"useEfect-1\")\n    const storeUserLoggedInInformation = localStorage.getItem(\"isLoggedIn\");\n    if (storeUserLoggedInInformation === \"1\") {\n      //console.log(\"useEfect-2\")\n\n      setIsLoggedIn(true);\n    }\n  }, []); //if doesn't have [] this code reruns whenever the component was reredered and if we have state in here  this would trigger a rerender cycle itself hence we would have an infinite loop\n\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    localStorage.setItem(\"isLoggedIn\", \"1\");\n    setIsLoggedIn(true);\n  };\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"isLoggedIn\");\n    setIsLoggedIn(false);\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        isLoggedIn: isLoggedIn,\n        onLogout: logoutHandler\n      }}\n    >\n      <MainHeader/>\n      <main>\n        {!isLoggedIn && <Login onLogin={loginHandler} />}\n        {isLoggedIn && <Home onLogout={logoutHandler} />}\n      </main>\n    </AuthContext.Provider>\n  );\n}\n\nexport default App; */","map":{"version":3,"names":[],"sources":["/home/jhonatan/developer/My-Learning-Tracker/My-Learning-Tracker/REACT/10-starting-project/src/App.js"],"sourcesContent":["/*import React, { useState, useEffect } from \"react\";\n\nimport Login from \"./components/Login/Login\";\nimport Home from \"./components/Home/Home\";\nimport MainHeader from \"./components/MainHeader/MainHeader\";\nimport AuthContext from \"./components/store/auth-context\";\n\nfunction App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  //console.log(\"loop\")\n\n  //this function don't run directly in the component function\n  // this functions is executed after every component re-evaluation\n  // this effect only ran once, when the component rendered for the first time\n  useEffect(() => {\n    //console.log(\"useEfect-1\")\n    const storeUserLoggedInInformation = localStorage.getItem(\"isLoggedIn\");\n    if (storeUserLoggedInInformation === \"1\") {\n      //console.log(\"useEfect-2\")\n\n      setIsLoggedIn(true);\n    }\n  }, []); //if doesn't have [] this code reruns whenever the component was reredered and if we have state in here  this would trigger a rerender cycle itself hence we would have an infinite loop\n\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    localStorage.setItem(\"isLoggedIn\", \"1\");\n    setIsLoggedIn(true);\n  };\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"isLoggedIn\");\n    setIsLoggedIn(false);\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        isLoggedIn: isLoggedIn,\n        onLogout: logoutHandler\n      }}\n    >\n      <MainHeader/>\n      <main>\n        {!isLoggedIn && <Login onLogin={loginHandler} />}\n        {isLoggedIn && <Home onLogout={logoutHandler} />}\n      </main>\n    </AuthContext.Provider>\n  );\n}\n\nexport default App; */\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}